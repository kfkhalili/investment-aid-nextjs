/* ──────────────────────────────────────────────────────────────────────
 * src/api/grades-consensus/service/types.ts (Supabase Version)
 * Type definitions and mappers for Grades Consensus data using Supabase.
 * Includes daily snapshot date and UUID id.
 * ---------------------------------------------------------------------*/
import type { Database } from "@/lib/supabase/database.types"; // Import generated DB types

// Define RowType using generated types
// Assumes your table name in Supabase is 'grades_consensus'
export type GradesConsensusRow =
  Database["public"]["Tables"]["grades_consensus"]["Row"];

// 1. Interface for Raw Data from FMP API (camelCase)
// FMP returns an array with one object. This defines the object structure.
export interface RawGradesConsensus {
  symbol: string;
  strongBuy: number | null;
  buy: number | null;
  hold: number | null;
  sell: number | null;
  strongSell: number | null;
  consensus: string | null;
}

// 2. Interface for API Response Shape (Conceptual Full Type)
// Derived from GradesConsensusRow (snake_case). Includes string id. Omits modified_at.
export interface GradesConsensusApiItem
  extends Omit<GradesConsensusRow, "id" | "modified_at" | "created_at"> {
  id: string; // API id is string
  // Inherits snake_case keys like strong_buy, strong_sell, date etc.
}
// Note: The generic service actually returns Partial<GradesConsensusApiItem>

// --- Mapping Function (Raw -> Row Structure for DB) ---

// Helper function for integer fields, defaulting to null
const integerOrNull = (value: number | null | undefined): number | null => {
  if (value === null || value === undefined) return null;
  return Math.round(value); // Round just in case FMP sends float
};

/**
 * Maps raw FMP API Grades Consensus data (camelCase) to the structure
 * needed for DB storage (snake_case), excluding id and timestamps.
 * Adds the current date for the snapshot.
 * Handles defaults (null for numbers/strings).
 */
export const mapRawGradesConsensusToRow = (
  raw: RawGradesConsensus
  // Return type excludes fields auto-generated by DB (id) or added by service (modified_at)
): Omit<GradesConsensusRow, "id" | "created_at" | "modified_at"> => {
  // Get current date in YYYY-MM-DD format for the 'date' column
  const snapshotDate = new Date().toISOString().split("T")[0];

  // Map RawGradesConsensus (camelCase) keys to GradesConsensusRow (snake_case) keys
  return {
    symbol: raw.symbol, // REQUIRED
    date: snapshotDate, // Add snapshot date - REQUIRED
    strong_buy: integerOrNull(raw.strongBuy),
    buy: integerOrNull(raw.buy),
    hold: integerOrNull(raw.hold),
    sell: integerOrNull(raw.sell),
    strong_sell: integerOrNull(raw.strongSell),
    consensus: raw.consensus ?? null,
  };
};

// Note: mapRowToApi is handled by the common mapper
