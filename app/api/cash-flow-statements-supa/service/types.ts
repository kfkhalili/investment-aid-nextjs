/* ──────────────────────────────────────────────────────────────────────
 * src/api/cash-flow-statement/service/types.ts (Supabase Version)
 * Type definitions and mappers for Cash Flow Statement data using Supabase.
 * ---------------------------------------------------------------------*/
import type { Database } from "@/lib/supabase/database.types"; // Import generated DB types

// Define RowType using generated types
// Assumes your table name in Supabase is 'cash_flow_statements'
export type CashFlowStatementRow =
  Database["public"]["Tables"]["cash_flow_statements"]["Row"];

// 1. Interface for Raw Data from FMP API (camelCase, added nullability)
// This should match the structure returned BY FMP.
export interface RawCashFlowStatement {
  date: string | null;
  symbol: string;
  reportedCurrency: string | null;
  cik: string | null;
  fillingDate: string | null;
  acceptedDate: string | null; // Timestamp string
  calendarYear: string | null; // FMP often sends year as string
  period: string;
  netIncome: number | null;
  depreciationAndAmortization: number | null;
  deferredIncomeTax: number | null;
  stockBasedCompensation: number | null;
  changeInWorkingCapital: number | null;
  accountsReceivables: number | null;
  inventory: number | null;
  accountsPayables: number | null;
  otherWorkingCapital: number | null;
  otherNonCashItems: number | null;
  netCashProvidedByOperatingActivities: number | null;
  investmentsInPropertyPlantAndEquipment: number | null;
  acquisitionsNet: number | null;
  purchasesOfInvestments: number | null;
  salesMaturitiesOfInvestments: number | null;
  otherInvestingActivites: number | null; // Note FMP spelling
  netCashUsedForInvestingActivites: number | null; // Note FMP spelling
  debtRepayment: number | null;
  commonStockIssued: number | null;
  commonStockRepurchased: number | null;
  dividendsPaid: number | null;
  otherFinancingActivites: number | null; // Note FMP spelling
  netCashUsedProvidedByFinancingActivities: number | null;
  effectOfForexChangesOnCash: number | null;
  netChangeInCash: number | null;
  cashAtEndOfPeriod: number | null;
  cashAtBeginningOfPeriod: number | null;
  operatingCashFlow: number | null;
  capitalExpenditure: number | null;
  freeCashFlow: number | null;
  link: string | null;
  finalLink: string | null;
}

// 2. Interface for API Response Shape (Conceptual Full Type)
// Derived from CashFlowStatementRow (snake_case), includes string id.
export interface CashFlowStatement
  extends Omit<CashFlowStatementRow, "id" | "modified_at" | "created_at"> {
  id: string; // API id is string
  // Inherits snake_case keys like depreciation_and_amortization, net_cash_provided_by_operating_activities etc.
}
// Note: The generic service actually returns Partial<CashFlowStatement>

// --- Mapping Function (Raw -> Row Structure for DB) ---

/**
 * Maps raw FMP API Cash Flow Statement data (camelCase) to the structure
 * needed for DB storage (snake_case), excluding id and timestamps.
 * Handles defaults (0 for numbers, null for strings) and type conversions.
 */
export const mapRawCashFlowStatementToRow = (
  raw: RawCashFlowStatement
  // Return type excludes fields auto-generated by DB (id) or added by service (modified_at)
): Omit<CashFlowStatementRow, "id" | "created_at" | "modified_at"> => {
  // Helper to safely parse string year to number, providing a fallback
  const parseYear = (year: string | null): number => {
    if (!year) return new Date().getFullYear();
    const num = parseInt(year, 10);
    return isNaN(num) ? new Date().getFullYear() : num;
  };
  // Helper to provide default date strings if needed (matching NOT NULL constraints)
  const ensureDateString = (dateStr: string | null): string => {
    return dateStr || new Date().toISOString().split("T")[0];
  };
  const ensureTimestampString = (tsStr: string | null): string => {
    return tsStr || new Date().toISOString();
  };

  // Map RawCashFlowStatement (camelCase assumed from FMP) keys to CashFlowStatementRow (snake_case) keys
  return {
    // Identifiers / Metadata (map and ensure NOT NULL if required by DB)
    date: ensureDateString(raw.date), // REQUIRED in DB
    symbol: raw.symbol, // REQUIRED in DB
    reported_currency: raw.reportedCurrency ?? "USD", // REQUIRED in DB
    cik: raw.cik ?? null,
    filling_date: ensureDateString(raw.fillingDate), // REQUIRED in DB
    accepted_date: ensureTimestampString(raw.acceptedDate), // REQUIRED in DB
    calendar_year: parseYear(raw.calendarYear), // REQUIRED in DB
    period: raw.period, // REQUIRED in DB

    // Map financial numbers (camelCase -> snake_case), defaulting to 0
    net_income: raw.netIncome ?? 0,
    depreciation_and_amortization: raw.depreciationAndAmortization ?? 0,
    deferred_income_tax: raw.deferredIncomeTax ?? 0,
    stock_based_compensation: raw.stockBasedCompensation ?? 0,
    change_in_working_capital: raw.changeInWorkingCapital ?? 0,
    accounts_receivables: raw.accountsReceivables ?? 0,
    inventory: raw.inventory ?? 0,
    accounts_payables: raw.accountsPayables ?? 0,
    other_working_capital: raw.otherWorkingCapital ?? 0,
    other_non_cash_items: raw.otherNonCashItems ?? 0,
    net_cash_provided_by_operating_activities:
      raw.netCashProvidedByOperatingActivities ?? 0,
    investments_in_property_plant_and_equipment:
      raw.investmentsInPropertyPlantAndEquipment ?? 0,
    acquisitions_net: raw.acquisitionsNet ?? 0,
    purchases_of_investments: raw.purchasesOfInvestments ?? 0,
    sales_maturities_of_investments: raw.salesMaturitiesOfInvestments ?? 0,
    other_investing_activites: raw.otherInvestingActivites ?? 0, // Matches DB snake_case
    net_cash_used_for_investing_activites:
      raw.netCashUsedForInvestingActivites ?? 0, // Matches DB snake_case
    debt_repayment: raw.debtRepayment ?? 0,
    common_stock_issued: raw.commonStockIssued ?? 0,
    common_stock_repurchased: raw.commonStockRepurchased ?? 0,
    dividends_paid: raw.dividendsPaid ?? 0,
    other_financing_activites: raw.otherFinancingActivites ?? 0, // Matches DB snake_case
    net_cash_used_provided_by_financing_activities:
      raw.netCashUsedProvidedByFinancingActivities ?? 0,
    effect_of_forex_changes_on_cash: raw.effectOfForexChangesOnCash ?? 0,
    net_change_in_cash: raw.netChangeInCash ?? 0,
    cash_at_end_of_period: raw.cashAtEndOfPeriod ?? 0,
    cash_at_beginning_of_period: raw.cashAtBeginningOfPeriod ?? 0,
    operating_cash_flow: raw.operatingCashFlow ?? 0,
    capital_expenditure: raw.capitalExpenditure ?? 0,
    free_cash_flow: raw.freeCashFlow ?? 0,

    // Links (map camelCase to snake_case, default to null)
    link: raw.link ?? null,
    final_link: raw.finalLink ?? null,
  };
};

// Note: mapRowToApi is handled by the common mapper
