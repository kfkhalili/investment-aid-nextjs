/* ──────────────────────────────────────────────────────────────────────
 * src/api/income-statements/service/types.ts (Supabase Version)
 * Type definitions and mappers for Income Statement data using Supabase.
 * ---------------------------------------------------------------------*/
import type { Database } from "@/lib/supabase/database.types"; // Import generated DB types

// Define RowType using generated types for type safety
// Assumes your table name in Supabase is 'income_statements'
export type IncomeStatementRow =
  Database["public"]["Tables"]["income_statements"]["Row"];

// 1. Interface for Raw Data from FMP API (camelCase, added potential nulls)
// This should match the structure returned BY FMP.
export interface RawIncomeStatement {
  date: string;
  symbol: string;
  reportedCurrency: string | null;
  cik: string | null;
  fillingDate: string | null;
  acceptedDate: string | null;
  calendarYear: string | null; // FMP sends year as string
  period: string;
  revenue: number | null;
  costOfRevenue: number | null;
  grossProfit: number | null;
  grossProfitRatio: number | null;
  researchAndDevelopmentExpenses: number | null;
  generalAndAdministrativeExpenses: number | null;
  sellingAndMarketingExpenses: number | null;
  sellingGeneralAndAdministrativeExpenses: number | null;
  otherExpenses: number | null;
  operatingExpenses: number | null;
  costAndExpenses: number | null;
  interestIncome: number | null;
  interestExpense: number | null;
  depreciationAndAmortization: number | null;
  ebitda: number | null;
  ebitdaratio: number | null;
  operatingIncome: number | null;
  operatingIncomeRatio: number | null;
  totalOtherIncomeExpensesNet: number | null;
  incomeBeforeTax: number | null;
  incomeBeforeTaxRatio: number | null;
  incomeTaxExpense: number | null;
  netIncome: number | null;
  netIncomeRatio: number | null;
  eps: number | null;
  epsdiluted: number | null;
  weightedAverageShsOut: number | null;
  weightedAverageShsOutDil: number | null;
  link: string | null;
  finalLink: string | null;
}

// 2. Interface for API Response Shape (Conceptual Full Type)
// Derived from IncomeStatementRow (snake_case), includes string id.
// Used for defining apiFieldOrder keys and the generic ApiType in config.
export interface IncomeStatement
  extends Omit<IncomeStatementRow, "id" | "modified_at" | "created_at"> {
  id: string; // API id is string
  // Inherits snake_case keys like cost_of_revenue, gross_profit_ratio etc. from IncomeStatementRow
}
// Note: The generic service actually returns Partial<IncomeStatement>

// --- Mapping Function (Raw -> Row Structure for DB) ---

/**
 * Maps raw FMP API Income Statement data (camelCase) to the structure
 * needed for DB storage (snake_case), excluding id and timestamps.
 * Handles defaults (0 for numbers, null for strings) and type conversions.
 */
export const mapRawIncomeStatementToRow = (
  raw: RawIncomeStatement
  // Return type excludes fields auto-generated by DB (id) or added by service (modified_at)
): Omit<IncomeStatementRow, "id" | "created_at" | "modified_at"> => {
  // Helper to safely parse string year to number, providing a fallback
  const parseYear = (year: string | null): number => {
    if (!year) return new Date().getFullYear(); // Default to current year if null/empty
    const num = parseInt(year, 10);
    return isNaN(num) ? new Date().getFullYear() : num; // Default if parsing fails
  };

  // Helper to provide default date strings if needed (matching NOT NULL constraints)
  const ensureDateString = (dateStr: string | null): string => {
    // Basic check, might need robust validation if FMP data is unreliable
    return dateStr || new Date().toISOString().split("T")[0];
  };
  const ensureTimestampString = (tsStr: string | null): string => {
    return tsStr || new Date().toISOString();
  };

  // Map RawIncomeStatement (camelCase assumed from FMP) keys to IncomeStatementRow (snake_case) keys
  return {
    // Identifiers / Metadata (map and ensure NOT NULL if required by DB)
    date: ensureDateString(raw.date),
    symbol: raw.symbol, // REQUIRED
    reported_currency: raw.reportedCurrency ?? "USD", // Use default, REQUIRED
    cik: raw.cik ?? null,
    filling_date: ensureDateString(raw.fillingDate), // REQUIRED
    accepted_date: ensureTimestampString(raw.acceptedDate), // REQUIRED
    calendar_year: parseYear(raw.calendarYear), // Parse to number, REQUIRED
    period: raw.period, // REQUIRED

    // Financial Numbers (map camelCase to snake_case, default to 0)
    revenue: raw.revenue ?? 0,
    cost_of_revenue: raw.costOfRevenue ?? 0,
    gross_profit: raw.grossProfit ?? 0,
    gross_profit_ratio: raw.grossProfitRatio ?? 0,
    research_and_development_expenses: raw.researchAndDevelopmentExpenses ?? 0,
    general_and_administrative_expenses:
      raw.generalAndAdministrativeExpenses ?? 0,
    selling_and_marketing_expenses: raw.sellingAndMarketingExpenses ?? 0,
    selling_general_and_administrative_expenses:
      raw.sellingGeneralAndAdministrativeExpenses ?? 0,
    other_expenses: raw.otherExpenses ?? 0,
    operating_expenses: raw.operatingExpenses ?? 0,
    cost_and_expenses: raw.costAndExpenses ?? 0,
    interest_income: raw.interestIncome ?? 0,
    interest_expense: raw.interestExpense ?? 0,
    depreciation_and_amortization: raw.depreciationAndAmortization ?? 0,
    ebitda: raw.ebitda ?? 0,
    ebitdaratio: raw.ebitdaratio ?? 0,
    operating_income: raw.operatingIncome ?? 0,
    operating_income_ratio: raw.operatingIncomeRatio ?? 0,
    total_other_income_expenses_net: raw.totalOtherIncomeExpensesNet ?? 0,
    income_before_tax: raw.incomeBeforeTax ?? 0,
    income_before_tax_ratio: raw.incomeBeforeTaxRatio ?? 0,
    income_tax_expense: raw.incomeTaxExpense ?? 0,
    net_income: raw.netIncome ?? 0,
    net_income_ratio: raw.netIncomeRatio ?? 0,
    eps: raw.eps ?? 0,
    epsdiluted: raw.epsdiluted ?? 0,
    weighted_average_shs_out: raw.weightedAverageShsOut ?? 0,
    weighted_average_shs_out_dil: raw.weightedAverageShsOutDil ?? 0,

    // Links (map camelCase to snake_case, default to null)
    link: raw.link ?? null,
    final_link: raw.finalLink ?? null,
  };
};

// Note: mapRowToApi (previously mapDocToApi) is handled by the common mapper
// which will be assigned in config.ts using:
// import { mapRowToPartialApi } from '@/api/common/supabase';
