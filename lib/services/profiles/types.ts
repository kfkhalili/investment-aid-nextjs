/* ──────────────────────────────────────────────────────────────────────
 * src/api/profile/service/types.ts (Supabase Version)
 * Type definitions and mappers for Company Profile data using Supabase.
 * ---------------------------------------------------------------------*/
import type { Database } from "@/lib/supabase/database.types"; // Import YOUR generated DB types

// Define RowType using generated types for type safety
// Assumes your table name in Supabase is 'profiles'
export type ProfileRow = Database["public"]["Tables"]["profiles"]["Row"];

// 1. Interface for Raw Data from FMP API (Assumes FMP uses camelCase as per example)
// This should match the structure returned BY FMP.
export interface RawProfile {
  symbol: string;
  price: number | null;
  marketCap: number | null;
  beta: number | null;
  lastDividend: number | null;
  range: string | null;
  change: number | null;
  changePercentage: number | null;
  volume: number | null;
  averageVolume: number | null; // Matches FMP example key
  companyName: string | null;
  currency: string | null;
  cik: string | null;
  isin: string | null;
  cusip: string | null;
  exchangeFullName: string | null;
  exchange: string | null;
  industry: string | null;
  website: string | null;
  description: string | null;
  ceo: string | null;
  sector: string | null;
  country: string | null;
  fullTimeEmployees: string | null; // Raw FMP data is string
  phone: string | null;
  address: string | null;
  city: string | null;
  state: string | null;
  zip: string | null;
  image: string | null;
  ipoDate: string | null;
  defaultImage: boolean | null;
  isEtf: boolean | null;
  isActivelyTrading: boolean | null;
  isAdr: boolean | null;
  isFund: boolean | null;
}

// 2. Interface for API Response Shape (Conceptual Full Type)
// Defines the structure for API consumers and for apiFieldOrder keyof check.
// Keys should match the Row keys (snake_case) unless you add another mapping layer.
// Includes string 'id', omits DB timestamps.
export interface Profile
  extends Omit<ProfileRow, "id" | "modified_at" | "created_at"> {
  id: string; // API id is string
  // All other properties are inherited from ProfileRow via Omit
  // e.g., company_name: string | null; average_volume: number | null; etc.
}
// Note: The generic service actually returns Partial<Profile>

// --- Mapping Function (Raw -> Row Structure for DB) ---
// Helper function to round number or return 0 (for BIGINT columns)
const roundToBigIntOrZero = (value: number | null | undefined): number => {
  return Math.round(value ?? 0);
};

/**
 * Maps the raw FMP API profile data (camelCase) to the structure needed for DB storage (snake_case),
 * excluding id and timestamps. Handles type conversion (string->number for employees) and defaults.
 */
export const mapRawProfileToRow = (
  raw: RawProfile
  // Return type omits fields generated by DB (id) or added by service (modified_at)
): Omit<ProfileRow, "id" | "created_at" | "modified_at"> => {
  // Helper to safely parse employee string to number
  const parseEmployees = (employees: string | null): number | null => {
    if (!employees) return null; // Handle null, undefined, empty string
    const num = parseInt(employees, 10);
    return isNaN(num) ? null : num;
  };

  // Map RawProfile keys (camelCase) to ProfileRow keys (snake_case from database.types.ts)
  return {
    symbol: raw.symbol, // Assumed same name
    price: raw.price ?? null,
    market_cap: roundToBigIntOrZero(raw.marketCap),
    beta: raw.beta ?? null,
    last_dividend: raw.lastDividend ?? null,
    range: raw.range ?? null,
    change: raw.change ?? null,
    change_percentage: raw.changePercentage ?? null,
    volume: roundToBigIntOrZero(raw.volume),
    average_volume: roundToBigIntOrZero(raw.averageVolume),
    company_name: raw.companyName ?? null,
    currency: raw.currency ?? null,
    cik: raw.cik ?? null,
    isin: raw.isin ?? null,
    cusip: raw.cusip ?? null,
    exchange_full_name: raw.exchangeFullName ?? null,
    exchange: raw.exchange ?? null,
    industry: raw.industry ?? null,
    website: raw.website ?? null,
    description: raw.description ?? null,
    ceo: raw.ceo ?? null,
    sector: raw.sector ?? null,
    country: raw.country ?? null,
    full_time_employees: parseEmployees(raw.fullTimeEmployees), // Convert and use snake_case
    phone: raw.phone ?? null,
    address: raw.address ?? null,
    city: raw.city ?? null,
    state: raw.state ?? null,
    zip: raw.zip ?? null,
    image: raw.image ?? null,
    ipo_date: raw.ipoDate ?? null,
    default_image: raw.defaultImage ?? false,
    is_etf: raw.isEtf ?? false,
    is_actively_trading: raw.isActivelyTrading ?? true, // Default assumption
    is_adr: raw.isAdr ?? false,
    is_fund: raw.isFund ?? false,
  };
};

// Note: mapRowToApi (previously mapDocToApi) is handled by the common mapper
// import { mapRowToPartialApi } from '@/api/common/supabase/mappers';
// which will be assigned in config.ts
